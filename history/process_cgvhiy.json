[{
  "history_id" : "134lax792kb",
  "history_input" : "import os\nimport requests\nfrom search_data import *\nfrom harmony import BBox, Client, Collection, Request, LinkType\nimport datetime as dt\nimport s3fs\nimport matplotlib.pyplot as plt\nfrom earth_access_authenticate import *\nimport earthaccess \nfrom pprint import pprint\nimport xarray as xr\n\n# Harmony\nimport geopandas as gpd\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\n\nQUEUEING TASKS | :   0%|                                 | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|███████████████████████| 18/18 [00:00<00:00, 605.95it/s]\n\nPROCESSING TASKS | :   0%|                               | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|█▎                     | 1/18 [00:00<00:10,  1.55it/s]\nPROCESSING TASKS | :  28%|██████▍                | 5/18 [00:00<00:01,  8.01it/s]\nPROCESSING TASKS | :  50%|███████████▌           | 9/18 [00:01<00:01,  8.39it/s]\nPROCESSING TASKS | :  72%|███████████████▉      | 13/18 [00:01<00:00, 11.74it/s]\nPROCESSING TASKS | :  83%|██████████████████▎   | 15/18 [00:01<00:00, 11.82it/s]\nPROCESSING TASKS | :  94%|████████████████████▊ | 17/18 [00:01<00:00, 10.13it/s]\nPROCESSING TASKS | : 100%|██████████████████████| 18/18 [00:01<00:00,  9.69it/s]\n\nCOLLECTING RESULTS | :   0%|                             | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|█████████████████| 18/18 [00:00<00:00, 90524.55it/s]\n",
  "history_begin_time" : 1686797310384,
  "history_end_time" : 1686797400163,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Done"
},{
  "history_id" : "n4vz8jen8cq",
  "history_input" : "import os\nimport requests\nfrom search_data import *\nfrom harmony import BBox, Client, Collection, Request, LinkType\nimport datetime as dt\nimport s3fs\nimport matplotlib.pyplot as plt\nfrom earth_access_authenticate import *\nimport earthaccess \nfrom pprint import pprint\nimport xarray as xr\n\n# Harmony\nimport geopandas as gpd\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3871.07it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:15,  1.11it/s]\nPROCESSING TASKS | :  44%|████▍     | 8/18 [00:01<00:01,  9.31it/s]\nPROCESSING TASKS | :  61%|██████    | 11/18 [00:01<00:00,  8.26it/s]\nPROCESSING TASKS | :  72%|███████▏  | 13/18 [00:01<00:00,  9.68it/s]\nPROCESSING TASKS | :  83%|████████▎ | 15/18 [00:01<00:00, 10.74it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00,  7.87it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  7.84it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 155986.51it/s]\nGranules found: 18\nGranules found: 18\nWe are already authenticated with NASA EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 1210.57it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:15,  1.13it/s]\nPROCESSING TASKS | :  28%|██▊       | 5/18 [00:00<00:02,  6.45it/s]\nPROCESSING TASKS | :  44%|████▍     | 8/18 [00:01<00:01,  9.95it/s]\nPROCESSING TASKS | :  61%|██████    | 11/18 [00:01<00:00,  8.78it/s]\nPROCESSING TASKS | :  72%|███████▏  | 13/18 [00:01<00:00,  9.94it/s]\nPROCESSING TASKS | :  83%|████████▎ | 15/18 [00:01<00:00, 10.58it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00,  8.38it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  7.90it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 148617.07it/s]\n",
  "history_begin_time" : 1686780376816,
  "history_end_time" : 1686780581574,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nrjt4ibnax7",
  "history_input" : "import os\nimport requests\nfrom search_data import *\nfrom harmony import BBox, Client, Collection, Request, LinkType\nimport datetime as dt\nimport s3fs\nimport matplotlib.pyplot as plt\nfrom earth_access_authenticate import *\nimport earthaccess \nfrom pprint import pprint\nimport xarray as xr\n\n# Harmony\nimport geopandas as gpd\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name':'us-west-2'},\n)\nf = s3_fs.open(url, mode='rb')\nds = xr.open_dataset(f)\nds.analysed_sst.plot()\nhome_dir = os.path.expanduser('~')\nplt.savefig(os.path.join(home_dir, 'plot2.png'))",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3450.84it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:15,  1.09it/s]\nPROCESSING TASKS | :  17%|█▋        | 3/18 [00:01<00:04,  3.21it/s]\nPROCESSING TASKS | :  44%|████▍     | 8/18 [00:01<00:01,  9.98it/s]\nPROCESSING TASKS | :  61%|██████    | 11/18 [00:01<00:00,  7.59it/s]\nPROCESSING TASKS | :  83%|████████▎ | 15/18 [00:01<00:00, 10.69it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00, 10.50it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  8.08it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 155025.61it/s]\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/s3fs/core.py\", line 113, in _error_wrapper\n    return await func(*args, **kwargs)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/aiobotocore/client.py\", line 371, in _make_api_call\n    raise error_class(parsed_response, operation_name)\nbotocore.exceptions.ClientError: An error occurred (403) when calling the HeadObject operation: Forbidden\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/nrjt4ibnax7/earth_access_authenticate.py\", line 8, in <module>\n    from earth_access_authenticate import *\n  File \"/Users/gokulprathin/gw-workspace/nrjt4ibnax7/earth_access_authenticate.py\", line 69, in <module>\n    f = s3_fs.open(url, mode='rb')\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fsspec/spec.py\", line 1241, in open\n    f = self._open(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/s3fs/core.py\", line 659, in _open\n    return S3File(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/s3fs/core.py\", line 2066, in __init__\n    super().__init__(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fsspec/spec.py\", line 1597, in __init__\n    self.size = self.details[\"size\"]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fsspec/spec.py\", line 1610, in details\n    self._details = self.fs.info(self.path)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fsspec/asyn.py\", line 121, in wrapper\n    return sync(self.loop, func, *args, **kwargs)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fsspec/asyn.py\", line 106, in sync\n    raise return_result\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fsspec/asyn.py\", line 61, in _runner\n    result[0] = await coro\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/s3fs/core.py\", line 1271, in _info\n    out = await self._call_s3(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/s3fs/core.py\", line 348, in _call_s3\n    return await _error_wrapper(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/s3fs/core.py\", line 140, in _error_wrapper\n    raise err\nPermissionError: Forbidden\n",
  "history_begin_time" : 1686780210241,
  "history_end_time" : 1686780309325,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "cjquvc9gj73",
  "history_input" : "import os\nimport requests\nfrom search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3953.58it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:01<00:21,  1.25s/it]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:02<00:01,  5.30it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00,  7.30it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  6.43it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 164124.94it/s]\n",
  "history_begin_time" : 1686779671054,
  "history_end_time" : 1686779781383,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hwjp1xrwas0",
  "history_input" : "import os\nimport requests\nfrom search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3081.66it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:13,  1.27it/s]\nPROCESSING TASKS | :  17%|█▋        | 3/18 [00:00<00:03,  3.96it/s]\nPROCESSING TASKS | :  33%|███▎      | 6/18 [00:01<00:01,  8.08it/s]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:01<00:01,  8.52it/s]\nPROCESSING TASKS | :  61%|██████    | 11/18 [00:01<00:00,  9.23it/s]\nPROCESSING TASKS | :  72%|███████▏  | 13/18 [00:01<00:00, 10.98it/s]\nPROCESSING TASKS | :  83%|████████▎ | 15/18 [00:01<00:00, 10.85it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00, 10.73it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  8.78it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 135300.13it/s]\n",
  "history_begin_time" : 1686779347861,
  "history_end_time" : 1686779454978,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mt4hhq2rbqi",
  "history_input" : "import os\nimport requests\nfrom search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 2733.93it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:13,  1.23it/s]\nPROCESSING TASKS | :  22%|██▏       | 4/18 [00:00<00:02,  5.50it/s]\nPROCESSING TASKS | :  33%|███▎      | 6/18 [00:01<00:01,  7.79it/s]\nPROCESSING TASKS | :  44%|████▍     | 8/18 [00:01<00:01,  8.61it/s]\nPROCESSING TASKS | :  56%|█████▌    | 10/18 [00:01<00:00,  8.84it/s]\nPROCESSING TASKS | :  67%|██████▋   | 12/18 [00:01<00:00,  9.85it/s]\nPROCESSING TASKS | :  78%|███████▊  | 14/18 [00:01<00:00, 10.27it/s]\nPROCESSING TASKS | :  89%|████████▉ | 16/18 [00:01<00:00, 10.22it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00, 11.92it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  8.64it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 114563.69it/s]\n",
  "history_begin_time" : 1686779124763,
  "history_end_time" : 1686779235234,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0pflxrkdypo",
  "history_input" : "import os\nimport requests\nfrom search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 2898.62it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:01<00:21,  1.25s/it]\nPROCESSING TASKS | :  28%|██▊       | 5/18 [00:01<00:02,  4.74it/s]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:02<00:01,  5.36it/s]\nPROCESSING TASKS | :  78%|███████▊  | 14/18 [00:02<00:00,  9.56it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00,  7.81it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  6.60it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 132451.71it/s]\n",
  "history_begin_time" : 1686778962496,
  "history_end_time" : 1686779077402,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "45ryjfpxr9c",
  "history_input" : "import os\nimport requests\nfrom search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\ncollection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "  File \"/Users/gokulprathin/gw-workspace/45ryjfpxr9c/earth_access_authenticate.py\", line 37\n    shape=geojson_path,\nIndentationError: unexpected indent\n",
  "history_begin_time" : 1686778910971,
  "history_end_time" : 1686778911082,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "ld9wsl3dslw",
  "history_input" : "import os\nimport requests\nfrom search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "  File \"/Users/gokulprathin/gw-workspace/ld9wsl3dslw/earth_access_authenticate.py\", line 37\n    collection=Collection(id=sst_short_name),\nIndentationError: unexpected indent\n",
  "history_begin_time" : 1686778880586,
  "history_end_time" : 1686778880692,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "9zhk0739q40",
  "history_input" : "import os\nimport requests\nfrom search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(local_file_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(local_file_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 2751.97it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:15,  1.12it/s]\nPROCESSING TASKS | :  28%|██▊       | 5/18 [00:01<00:02,  5.43it/s]\nPROCESSING TASKS | :  39%|███▉      | 7/18 [00:01<00:01,  5.54it/s]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:01<00:01,  7.23it/s]\nPROCESSING TASKS | :  61%|██████    | 11/18 [00:01<00:00,  7.17it/s]\nPROCESSING TASKS | :  67%|██████▋   | 12/18 [00:02<00:00,  7.09it/s]\nPROCESSING TASKS | :  83%|████████▎ | 15/18 [00:02<00:00, 10.78it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00, 10.41it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  7.51it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 138273.76it/s]\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/9zhk0739q40/earth_access_authenticate.py\", line 28, in <module>\n    with open(local_file_path, 'w') as f:\nNameError: name 'local_file_path' is not defined\n",
  "history_begin_time" : 1686778793267,
  "history_end_time" : 1686778846285,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "reuzzgjm48f",
  "history_input" : "from search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 2338.61it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:14,  1.21it/s]\nPROCESSING TASKS | :  39%|███▉      | 7/18 [00:00<00:01,  9.13it/s]\nPROCESSING TASKS | :  56%|█████▌    | 10/18 [00:01<00:01,  7.58it/s]\nPROCESSING TASKS | :  78%|███████▊  | 14/18 [00:01<00:00,  9.78it/s]\nPROCESSING TASKS | :  89%|████████▉ | 16/18 [00:01<00:00, 10.28it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  8.02it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  7.80it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 165202.35it/s]\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/reuzzgjm48f/earth_access_authenticate.py\", line 36, in <module>\n    job_id = harmony_client.submit(request)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/harmony/harmony.py\", line 727, in submit\n    raise Exception(f\"Cannot submit the request due to the following errors: [{msgs}]\")\nException: Cannot submit the request due to the following errors: [The provided shape path \"https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json\" does not exist]\n",
  "history_begin_time" : 1686778402763,
  "history_end_time" : 1686778458821,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "bdul6d8h0ms",
  "history_input" : "from search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3414.78it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:11,  1.49it/s]\nPROCESSING TASKS | :  39%|███▉      | 7/18 [00:00<00:01,  9.49it/s]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:01<00:01,  7.38it/s]\nPROCESSING TASKS | :  67%|██████▋   | 12/18 [00:01<00:00,  7.52it/s]\nPROCESSING TASKS | :  72%|███████▏  | 13/18 [00:01<00:00,  6.73it/s]\nPROCESSING TASKS | :  78%|███████▊  | 14/18 [00:02<00:00,  7.12it/s]\nPROCESSING TASKS | :  89%|████████▉ | 16/18 [00:02<00:00,  8.55it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:03<00:00,  4.59it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:03<00:00,  5.93it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 150094.38it/s]\nTraceback (most recent call last):\n  File \"fiona/ogrext.pyx\", line 136, in fiona.ogrext.gdal_open_vector\n  File \"fiona/_err.pyx\", line 291, in fiona._err.exc_wrap_pointer\nfiona._err.CPLE_OpenFailedError: /home/jovyan/gulf.json: No such file or directory\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/bdul6d8h0ms/earth_access_authenticate.py\", line 22, in <module>\n    gdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/geopandas/io/file.py\", line 281, in _read_file\n    return _read_file_fiona(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/geopandas/io/file.py\", line 322, in _read_file_fiona\n    with reader(path_or_bytes, **kwargs) as features:\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fiona/env.py\", line 457, in wrapper\n    return f(*args, **kwds)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fiona/__init__.py\", line 292, in open\n    colxn = Collection(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/fiona/collection.py\", line 243, in __init__\n    self.session.start(self, **kwargs)\n  File \"fiona/ogrext.pyx\", line 588, in fiona.ogrext.Session.start\n  File \"fiona/ogrext.pyx\", line 143, in fiona.ogrext.gdal_open_vector\nfiona.errors.DriverError: /home/jovyan/gulf.json: No such file or directory\n",
  "history_begin_time" : 1686778243789,
  "history_end_time" : 1686778300235,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "gy13ofjgr7g",
  "history_input" : "from search_data import *\n\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Granules found: 18\nGranules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3589.82it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:16,  1.02it/s]\nPROCESSING TASKS | :  33%|███▎      | 6/18 [00:01<00:01,  6.83it/s]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:01<00:01,  6.52it/s]\nPROCESSING TASKS | :  72%|███████▏  | 13/18 [00:01<00:00,  9.60it/s]\nPROCESSING TASKS | :  83%|████████▎ | 15/18 [00:01<00:00, 10.54it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00,  8.50it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  7.83it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 145187.45it/s]\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/gy13ofjgr7g/earth_access_authenticate.py\", line 20, in <module>\n    ds = xr.open_mfdataset(earthaccess.open(results))\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in open_mfdataset\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in <listcomp>\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 572, in open_dataset\n    ds = _dataset_from_backend_dataset(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 367, in _dataset_from_backend_dataset\n    ds = _chunk_ds(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 315, in _chunk_ds\n    chunkmanager = guess_chunkmanager(chunked_array_type)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/core/parallelcompat.py\", line 87, in guess_chunkmanager\n    raise ValueError(\nValueError: unrecognized chunk manager dask - must be one of: []\n",
  "history_begin_time" : 1686778192766,
  "history_end_time" : 1686778204438,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "0rv48arelsq",
  "history_input" : "from earth_data_utils import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Granules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3470.83it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:16,  1.02it/s]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:01<00:01,  6.81it/s]\nPROCESSING TASKS | :  78%|███████▊  | 14/18 [00:01<00:00, 10.92it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00,  8.78it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  8.14it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 163414.44it/s]\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/0rv48arelsq/earth_access_authenticate.py\", line 12, in <module>\n    ds = xr.open_mfdataset(earthaccess.open(results))\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in open_mfdataset\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in <listcomp>\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 572, in open_dataset\n    ds = _dataset_from_backend_dataset(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 367, in _dataset_from_backend_dataset\n    ds = _chunk_ds(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 315, in _chunk_ds\n    chunkmanager = guess_chunkmanager(chunked_array_type)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/core/parallelcompat.py\", line 87, in guess_chunkmanager\n    raise ValueError(\nValueError: unrecognized chunk manager dask - must be one of: []\n",
  "history_begin_time" : 1686777814122,
  "history_end_time" : 1686777824190,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "6l9tgvawkhk",
  "history_input" : "from search_data import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Granules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3319.01it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:01<00:19,  1.15s/it]\nPROCESSING TASKS | :  44%|████▍     | 8/18 [00:01<00:01,  7.04it/s]\nPROCESSING TASKS | :  56%|█████▌    | 10/18 [00:01<00:01,  5.90it/s]\nPROCESSING TASKS | :  89%|████████▉ | 16/18 [00:02<00:00,  9.70it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  8.23it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  6.95it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 111189.21it/s]\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/6l9tgvawkhk/earth_access_authenticate.py\", line 12, in <module>\n    ds = xr.open_mfdataset(earthaccess.open(results))\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in open_mfdataset\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in <listcomp>\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 572, in open_dataset\n    ds = _dataset_from_backend_dataset(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 367, in _dataset_from_backend_dataset\n    ds = _chunk_ds(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 315, in _chunk_ds\n    chunkmanager = guess_chunkmanager(chunked_array_type)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/core/parallelcompat.py\", line 87, in guess_chunkmanager\n    raise ValueError(\nValueError: unrecognized chunk manager dask - must be one of: []\n",
  "history_begin_time" : 1686777731976,
  "history_end_time" : 1686777743447,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "hvp0wr3mjjb",
  "history_input" : "from search_data import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Granules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 3674.20it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:00<00:10,  1.59it/s]\nPROCESSING TASKS | :  28%|██▊       | 5/18 [00:00<00:01,  7.46it/s]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:01<00:01,  7.70it/s]\nPROCESSING TASKS | :  67%|██████▋   | 12/18 [00:01<00:00, 10.02it/s]\nPROCESSING TASKS | :  89%|████████▉ | 16/18 [00:01<00:00, 14.35it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  8.98it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 139551.70it/s]\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/hvp0wr3mjjb/earth_access_authenticate.py\", line 12, in <module>\n    ds = xr.open_mfdataset(earthaccess.open(results))\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in open_mfdataset\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in <listcomp>\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 572, in open_dataset\n    ds = _dataset_from_backend_dataset(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 367, in _dataset_from_backend_dataset\n    ds = _chunk_ds(\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 315, in _chunk_ds\n    chunkmanager = guess_chunkmanager(chunked_array_type)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/core/parallelcompat.py\", line 87, in guess_chunkmanager\n    raise ValueError(\nValueError: unrecognized chunk manager dask - must be one of: []\n",
  "history_begin_time" : 1686777581471,
  "history_end_time" : 1686777593230,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "wipmmxsbfr4",
  "history_input" : "from search_data import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Granules found: 18\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 08/07/2023\nUsing .netrc file for EDL\n Opening 18 granules, approx size: 0.0 GB\nQUEUEING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nQUEUEING TASKS | : 100%|██████████| 18/18 [00:00<00:00, 2892.96it/s]\nPROCESSING TASKS | :   0%|          | 0/18 [00:00<?, ?it/s]\nPROCESSING TASKS | :   6%|▌         | 1/18 [00:01<00:19,  1.16s/it]\nPROCESSING TASKS | :  22%|██▏       | 4/18 [00:01<00:03,  3.97it/s]\nPROCESSING TASKS | :  33%|███▎      | 6/18 [00:01<00:02,  5.64it/s]\nPROCESSING TASKS | :  50%|█████     | 9/18 [00:01<00:01,  6.21it/s]\nPROCESSING TASKS | :  61%|██████    | 11/18 [00:01<00:00,  7.77it/s]\nPROCESSING TASKS | :  72%|███████▏  | 13/18 [00:02<00:00,  8.50it/s]\nPROCESSING TASKS | :  83%|████████▎ | 15/18 [00:02<00:00,  9.23it/s]\nPROCESSING TASKS | :  94%|█████████▍| 17/18 [00:02<00:00,  8.55it/s]\nPROCESSING TASKS | : 100%|██████████| 18/18 [00:02<00:00,  6.32it/s]\nCOLLECTING RESULTS | :   0%|          | 0/18 [00:00<?, ?it/s]\nCOLLECTING RESULTS | : 100%|██████████| 18/18 [00:00<00:00, 48241.20it/s]\nTraceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/wipmmxsbfr4/earth_access_authenticate.py\", line 12, in <module>\n    ds = xr.open_mfdataset(earthaccess.open(results))\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in open_mfdataset\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 1038, in <listcomp>\n    datasets = [open_(p, **open_kwargs) for p in paths]\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/api.py\", line 547, in open_dataset\n    engine = plugins.guess_engine(filename_or_obj)\n  File \"/Users/gokulprathin/miniconda3/envs/gokuls-mbp/lib/python3.10/site-packages/xarray/backends/plugins.py\", line 197, in guess_engine\n    raise ValueError(error_msg)\nValueError: found the following matches with the input file in xarray's IO backends: ['h5netcdf']. But their dependencies may not be installed, see:\nhttps://docs.xarray.dev/en/stable/user-guide/io.html \nhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\n",
  "history_begin_time" : 1686777532660,
  "history_end_time" : 1686777542095,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "xsshefugc0m",
  "history_input" : "from search_data import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/xsshefugc0m/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/xsshefugc0m/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/xsshefugc0m/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686777106342,
  "history_end_time" : 1686777106397,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "e7zwljkt953",
  "history_input" : "from search_data import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/e7zwljkt953/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/e7zwljkt953/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/e7zwljkt953/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686775652146,
  "history_end_time" : 1686775652258,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "0z9teyfs1b3",
  "history_input" : "from search_data import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/0z9teyfs1b3/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/0z9teyfs1b3/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/0z9teyfs1b3/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686775585523,
  "history_end_time" : 1686775585649,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "t2eyfakzct8",
  "history_input" : "from search_data import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/t2eyfakzct8/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/t2eyfakzct8/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/t2eyfakzct8/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686775519209,
  "history_end_time" : 1686775519337,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "mhf9yyvqvou",
  "history_input" : "from search_data import *\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_path = '/home/jovyan/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/mhf9yyvqvou/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/mhf9yyvqvou/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/mhf9yyvqvou/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686775422360,
  "history_end_time" : 1686775422468,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "sskjp2iaxdh",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1686775389895,
  "history_end_time" : 1686775389918,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "hd5mcgxupq0",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/hd5mcgxupq0/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/home/chetana/gw-workspace/hd5mcgxupq0/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/home/chetana/gw-workspace/hd5mcgxupq0/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686241622980,
  "history_end_time" : 1686244617717,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "php2ka87p54",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/php2ka87p54/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/php2ka87p54/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/php2ka87p54/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686241485832,
  "history_end_time" : 1686241485944,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "r0rlby163b8",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/r0rlby163b8/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/r0rlby163b8/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/r0rlby163b8/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686241465357,
  "history_end_time" : 1686241465472,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "0z9r2d8v90t",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/0z9r2d8v90t/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/0z9r2d8v90t/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/0z9r2d8v90t/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686241408777,
  "history_end_time" : 1686241412626,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "xm98fi0682y",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/xm98fi0682y/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/home/chetana/gw-workspace/xm98fi0682y/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/home/chetana/gw-workspace/xm98fi0682y/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \n",
  "history_begin_time" : 1686241333807,
  "history_end_time" : 1686241339094,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "ore06ski8xt",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/ore06ski8xt/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/ore06ski8xt/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/ore06ski8xt/earth_data_utils.py\", line 10, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686240683867,
  "history_end_time" : 1686240683964,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "tzhtah0nu72",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/tzhtah0nu72/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/tzhtah0nu72/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/tzhtah0nu72/earth_data_utils.py\", line 1\n    !pip3 install earthaccess xarray geopandas geoviews harmony s3fs\n    ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1686240635253,
  "history_end_time" : 1686240635348,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "tcvsphmrvnq",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/tcvsphmrvnq/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/Users/gokulprathin/gw-workspace/tcvsphmrvnq/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/Users/gokulprathin/gw-workspace/tcvsphmrvnq/earth_data_utils.py\", line 7, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686240568601,
  "history_end_time" : 1686240568704,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "jhzwkhohmz7",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/jhzwkhohmz7/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/home/chetana/gw-workspace/jhzwkhohmz7/search_data.py\", line 1, in <module>\n    from earth_data_utils import *\n  File \"/home/chetana/gw-workspace/jhzwkhohmz7/earth_data_utils.py\", line 7, in <module>\n    import earthaccess \nModuleNotFoundError: No module named 'earthaccess'\n",
  "history_begin_time" : 1686240523666,
  "history_end_time" : 1686240525869,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Failed"
},{
  "history_id" : "alm4h4h5irw",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "sh: /home/chetana/anaconda3/condabin/python: No such file or directory\n",
  "history_begin_time" : 1686240492186,
  "history_end_time" : 1686240496414,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "2z9k699i4su",
  "history_input" : "from search_data import *\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/2z9k699i4su/earth_access_authenticate.py\", line 1, in <module>\n    from search_data import *\n  File \"/home/chetana/gw-workspace/2z9k699i4su/search_data.py\", line 1, in <module>\n    from earth_dat_utils import *\nModuleNotFoundError: No module named 'earth_dat_utils'\n",
  "history_begin_time" : 1686240322818,
  "history_end_time" : 1686240331454,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "tjs2ya41e2n",
  "history_input" : "auth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \ngdf = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ],\n            [\n              -97.13008502799451,\n              27.537299169977643\n            ],\n            [\n              -97.92333884760556,\n              23.117355263556085\n            ],\n            [\n              -96.20462223844827,\n              19.297357882373674\n            ],\n            [\n              -91.0484724109764,\n              19.2349555158823\n            ],\n            [\n              -89.32975580181909,\n              21.096419248573053\n            ],\n            [\n              -84.63633736912035,\n              21.404467339404434\n            ],\n            [\n              -80.9344862109354,\n              24.928609732834346\n            ],\n            [\n              -83.7769790645417,\n              30.199837703950273\n            ],\n            [\n              -92.50277108026334,\n              29.56938225072281\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/tjs2ya41e2n/earth_access_authenticate.py\", line 1, in <module>\n    auth = earthaccess.login(strategy=\"netrc\", persist=True)\nNameError: name 'earthaccess' is not defined\n",
  "history_begin_time" : 1686240137505,
  "history_end_time" : 1686240219860,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "xb7v9iap72l",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686240359460,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "zftnvonktj6",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686240477215,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "kd9bx6e2b9t",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686241361742,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "5p7p9hcc8lh",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686241372957,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7uo9oiitmzs",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686775631047,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yzyt4to2s34",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686776085475,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bhwnwwpu6yd",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686776087382,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "l1vo67pnui1",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686797289430,
  "history_notes" : null,
  "history_process" : "cgvhiy",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},]

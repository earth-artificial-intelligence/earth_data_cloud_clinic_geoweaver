[{
  "id" : "wttkvt",
  "name" : "earth_data_utils",
  "description" : null,
  "code" : "\n\n\n# Suppress warnings\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\n\n# Direct access\nimport earthaccess \nfrom pprint import pprint\nimport xarray as xr\n\n# Harmony\nimport geopandas as gpd\nfrom harmony import BBox, Client, Collection, Request, LinkType\nimport datetime as dt\nimport s3fs",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "cgvhiy",
  "name" : "earth_access_authenticate",
  "description" : null,
  "code" : "import os\nimport requests\nfrom search_data import *\nfrom harmony import BBox, Client, Collection, Request, LinkType\nimport datetime as dt\nimport s3fs\nimport matplotlib.pyplot as plt\nfrom earth_access_authenticate import *\nimport earthaccess \nfrom pprint import pprint\nimport xarray as xr\n\n# Harmony\nimport geopandas as gpd\n\nssh_short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nresults = earthaccess.search_data(\n    short_name=ssh_short_name,\n    cloud_hosted=True,\n    temporal=(\"2021-07-01\", \"2021-09-30\"),\n)\n\nauth = earthaccess.login(strategy=\"netrc\", persist=True)\nds = xr.open_mfdataset(earthaccess.open(results))\ngeojson_url = 'https://raw.githubusercontent.com/earth-artificial-intelligence/earth_data_cloud_clinic_geoweaver/main/gulf.json'\n\nhome_dir = os.path.expanduser('~')\ngeojson_path = os.path.join(home_dir, 'gulf.json')\nresponse = requests.get(geojson_url)\nwith open(geojson_path, 'w') as f:\n\tf.write(response.text)\n\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\n\nharmony_client = Client()\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n  collection=Collection(id=sst_short_name),\n  shape=geojson_path,\n  temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\n\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "2a8mok",
  "name" : "install_deps",
  "description" : null,
  "code" : "pip3 install requests earthaccess xarray geopandas s3fs h5netcdf dask matplotlib\npip install -U harmony-py",
  "lang" : "shell",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "1b4ko0",
  "name" : "s3_file_storage",
  "description" : null,
  "code" : "# Suppress warnings\nimport os\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\n\n# Direct access\nimport earthaccess \nfrom pprint import pprint\nimport xarray as xr\n\n# Harmony\nimport geopandas as gpd\nfrom harmony import BBox, Client, Collection, Request, LinkType\nimport datetime as dt\nimport s3fs\nimport matplotlib.pyplot as plt\nfrom earth_access_authenticate import *\n\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name':'us-west-2'},\n)\n\nf = s3_fs.open(url, mode='rb')\nds = xr.open_dataset(f)\nds.analysed_sst.plot()\nhome_dir = os.path.expanduser('~')\nplt.savefig(os.path.join(home_dir, 'plot2.png'))",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
}]
